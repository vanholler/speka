// vite.preload.config.mjs
import { defineConfig, mergeConfig } from "file:///C:/Users/amihn/OneDrive/%D0%A0%D0%B0%D0%B1%D0%BE%D1%87%D0%B8%D0%B9%20%D1%81%D1%82%D0%BE%D0%BB/electron/my-vue-app/node_modules/vite/dist/node/index.js";

// vite.base.config.mjs
import { builtinModules } from "node:module";

// package.json
var package_default = {
  name: "my-vue-app",
  productName: "my-vue-app",
  version: "1.0.0",
  description: "My Electron application description",
  main: ".vite/build/main.js",
  scripts: {
    start: "electron-forge start",
    package: "electron-forge package",
    make: "electron-forge make",
    publish: "electron-forge publish",
    lint: 'echo "No linting configured"'
  },
  devDependencies: {
    "@electron-forge/cli": "^7.3.1",
    "@electron-forge/maker-deb": "^7.3.1",
    "@electron-forge/maker-rpm": "^7.3.1",
    "@electron-forge/maker-squirrel": "^7.3.1",
    "@electron-forge/maker-zip": "^7.3.1",
    "@electron-forge/plugin-auto-unpack-natives": "^7.3.1",
    "@electron-forge/plugin-fuses": "^7.3.1",
    "@electron-forge/plugin-vite": "^7.3.1",
    "@electron/fuses": "^1.8.0",
    "@quasar/vite-plugin": "^1.6.0",
    "@vitejs/plugin-vue": "^5.0.4",
    electron: "29.2.0",
    sass: "^1.33.0",
    vite: "^5.2.8"
  },
  keywords: [],
  author: {
    name: "vanholler",
    email: "vanholler@mail.ru"
  },
  license: "MIT",
  dependencies: {
    "@highlightjs/vue-plugin": "^2.1.0",
    "@quasar/extras": "^1.16.11",
    "electron-squirrel-startup": "^1.0.0",
    "highlight.js": "^11.9.0",
    quasar: "^2.15.2",
    vue: "^3.4.21",
    "vue-highlight-code": "^0.2.0"
  }
};

// vite.base.config.mjs
var builtins = [
  "electron",
  ...builtinModules.map((m) => [m, `node:${m}`]).flat()
];
var external = [...builtins, ...Object.keys(package_default.dependencies || {})];
var getBuildConfig = (env) => {
  const { root, mode, command } = env;
  return {
    root,
    mode,
    build: {
      // Prevent multiple builds from interfering with each other.
      emptyOutDir: false,
      // ðŸš§ Multiple builds may conflict.
      outDir: ".vite/build",
      watch: command === "serve" ? {} : null,
      minify: command === "build"
    },
    clearScreen: false
  };
};
var pluginHotRestart = (command) => {
  return {
    name: "@electron-forge/plugin-vite:hot-restart",
    closeBundle() {
      if (command === "reload") {
        for (const server of Object.values(process.viteDevServers)) {
          server.ws.send({ type: "full-reload" });
        }
      } else {
        process.stdin.emit("data", "rs");
      }
    }
  };
};

// vite.preload.config.mjs
var vite_preload_config_default = defineConfig((env) => {
  const forgeEnv = env;
  const { forgeConfigSelf } = forgeEnv;
  const config = {
    build: {
      rollupOptions: {
        external,
        // Preload scripts may contain Web assets, so use the `build.rollupOptions.input` instead `build.lib.entry`.
        input: forgeConfigSelf.entry,
        output: {
          format: "cjs",
          // It should not be split chunks.
          inlineDynamicImports: true,
          entryFileNames: "[name].js",
          chunkFileNames: "[name].js",
          assetFileNames: "[name].[ext]"
        }
      }
    },
    plugins: [pluginHotRestart("reload")]
  };
  return mergeConfig(getBuildConfig(forgeEnv), config);
});
export {
  vite_preload_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
